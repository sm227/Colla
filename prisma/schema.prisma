generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String          @id @default(uuid())
  name        String
  email       String          @unique
  password    String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  projects    Project[]
  memberships ProjectMember[]
  comments    Comment[]
  calendars   Calendar[]
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String
  priority    String
  assignee    String?
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projectId   String?
  endDate     DateTime?
  isAllDay    Boolean   @default(false)
  startDate   DateTime?
  project     Project?  @relation(fields: [projectId], references: [id])
  comments    Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  taskId    String
  userId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id          String          @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  userId      String?
  documents   Document[]
  folders     Folder[]
  user        User?           @relation(fields: [userId], references: [id])
  members     ProjectMember[]
  tasks       Task[]
  calendars   Calendar[]
}

model ProjectMember {
  id           String   @id @default(cuid())
  userId       String
  projectId    String
  role         String   @default("member")
  inviteStatus String   @default("pending")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  project      Project  @relation(fields: [projectId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@unique([userId, projectId])
}

model Document {
  id         String   @id @default(cuid())
  title      String
  content    String
  emoji      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  projectId  String?
  folder     String?
  isStarred  Boolean  @default(false)
  isReadOnly Boolean  @default(false)
  tags       String?
  folderId   String?
  folderRef  Folder?  @relation(fields: [folderId], references: [id])
  project    Project? @relation(fields: [projectId], references: [id])
  ycontent   Bytes? // Y.js 문서 바이너리 데이터
  password   String? // 문서 암호 보호를 위한 필드
  isPasswordProtected Boolean @default(false) // 암호 보호 활성화 여부
}

model Folder {
  id          String     @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  projectId   String?
  documents   Document[]
  project     Project?   @relation(fields: [projectId], references: [id])
}

model Calendar {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  startDate   DateTime
  endDate     DateTime?
  isAllDay    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  projectId String?
}
