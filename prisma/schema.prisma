generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String          @id @default(uuid())
  name        String
  email       String          @unique
  password    String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  projects    Project[]
  memberships ProjectMember[]
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String
  priority    String
  assignee    String?
  dueDate     DateTime?
  startDate   DateTime?
  endDate     DateTime?
  isAllDay    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projectId   String?
  project     Project?  @relation(fields: [projectId], references: [id])
}

model Project {
  id          String          @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  tasks       Task[]
  userId      String?
  user        User?           @relation(fields: [userId], references: [id])
  documents   Document[]
  members     ProjectMember[]
  folders     Folder[]
}

model ProjectMember {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  projectId    String
  project      Project  @relation(fields: [projectId], references: [id])
  role         String   @default("member")
  inviteStatus String   @default("pending")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, projectId])
}

model Document {
  id        String   @id @default(cuid())
  title     String
  content   String
  emoji     String?
  isStarred Boolean  @default(false)
  folder    String?
  tags      String? // JSON array stored as string
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])
  folderId  String?
  folderRef Folder?  @relation(fields: [folderId], references: [id])
}

model Folder {
  id          String     @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  projectId   String?
  project     Project?   @relation(fields: [projectId], references: [id])
  documents   Document[]
}
